
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078e  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f2  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ba  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 91 00 	call	0x122	; 0x122 <main>
  88:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
			OCR0A = 0;
		}
    }
}

ISR(PCINT1_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	if(!(PINC & (1 << PINC1))) { // if Button pressed
  a0:	31 99       	sbic	0x06, 1	; 6
  a2:	15 c0       	rjmp	.+42     	; 0xce <__vector_4+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	81 ee       	ldi	r24, 0xE1	; 225
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__vector_4+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_4+0x24>
  b4:	00 00       	nop
		_delay_ms(100); // debouncing
		while(!(PINC&(1<<PINC1))); // extra debouncing
  b6:	31 9b       	sbis	0x06, 1	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <__vector_4+0x26>
		motor ^= 1; // Toggle motor
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	82 27       	eor	r24, r18
  c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <PWM_init>:

void PWM_init(void) {
	DDRD |= (1<<PORTD6); // PD6 as output
  de:	56 9a       	sbi	0x0a, 6	; 10
	DDRC |= (1<<PORTC1); // PC1 as output for interrupt
  e0:	39 9a       	sbi	0x07, 1	; 7
	TCCR0A |=
  e2:	84 b5       	in	r24, 0x24	; 36
  e4:	83 68       	ori	r24, 0x83	; 131
  e6:	84 bd       	out	0x24, r24	; 36
	(1<<WGM01)| // Fast
	(1<<WGM00)| // PWM
	(1<<COM0A1);// Clear OC0A on compare/set OC0A as bottom (non-inverting)
	PCMSK1 |= (1<<PCINT9); // Enable PCINT9
  e8:	ec e6       	ldi	r30, 0x6C	; 108
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1); // Enable PCMSK1
  f2:	e8 e6       	ldi	r30, 0x68	; 104
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	TCCR0B |=
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	85 bd       	out	0x25, r24	; 37
 102:	08 95       	ret

00000104 <ADC_init>:
	(1<<CS00); // 1024 and start pwm
	
}

void ADC_init(void) {
	DDRC &= (0<<PORTC0); // PC0 as input
 104:	87 b1       	in	r24, 0x07	; 7
 106:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC1); // Pull up resistor
 108:	41 9a       	sbi	0x08, 1	; 8
	ADMUX |= (1<<REFS0); // REFERENCE VOLTAGE AT AREF
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
	ADCSRA |= 
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 68       	ori	r24, 0x87	; 135
 11c:	80 83       	st	Z, r24
	(1<<ADEN)| // ADC enable
	(1<<ADPS2)| // ADC
	(1<<ADPS1)| // Prescaler
	(1<<ADPS0); // 128
	sei();
 11e:	78 94       	sei
 120:	08 95       	ret

00000122 <main>:

volatile int ADCvalue; // holds the value of ADC
volatile int motor = 0; // State of motor 0 = off, 1 = on
int main(void)
{
    ADC_init(); // initializes ADC
 122:	0e 94 82 00 	call	0x104	; 0x104 <ADC_init>
	PWM_init(); // initiales PWM
 126:	0e 94 6f 00 	call	0xde	; 0xde <PWM_init>
    while (1) 
    {
		if (motor == 1) {
			ADCSRA |= (1<<ADSC); // Start conversion
 12a:	ca e7       	ldi	r28, 0x7A	; 122
 12c:	d0 e0       	ldi	r29, 0x00	; 0
			while((ADCSRA&(1<<ADIF))==0); // while not done converting do nothing
			ADCSRA |= (1<<ADIF); // reset converter
			ADCvalue = ADC; // store ADC to ADCvalue for debugging
 12e:	08 e7       	ldi	r16, 0x78	; 120
 130:	10 e0       	ldi	r17, 0x00	; 0
{
    ADC_init(); // initializes ADC
	PWM_init(); // initiales PWM
    while (1) 
    {
		if (motor == 1) {
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	19 f5       	brne	.+70     	; 0x184 <main+0x62>
			ADCSRA |= (1<<ADSC); // Start conversion
 13e:	88 81       	ld	r24, Y
 140:	80 64       	ori	r24, 0x40	; 64
 142:	88 83       	st	Y, r24
			while((ADCSRA&(1<<ADIF))==0); // while not done converting do nothing
 144:	88 81       	ld	r24, Y
 146:	84 ff       	sbrs	r24, 4
 148:	fd cf       	rjmp	.-6      	; 0x144 <main+0x22>
			ADCSRA |= (1<<ADIF); // reset converter
 14a:	88 81       	ld	r24, Y
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	88 83       	st	Y, r24
			ADCvalue = ADC; // store ADC to ADCvalue for debugging
 150:	f8 01       	movw	r30, r16
 152:	80 81       	ld	r24, Z
 154:	91 81       	ldd	r25, Z+1	; 0x01
 156:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ADCvalue+0x1>
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADCvalue>
			OCR0A = CONVERSION*ADCvalue; // 224/1024 is the ratio of the speed so that max speed is 95% of the pwm
 15e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <ADCvalue>
 162:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <ADCvalue+0x1>
 166:	07 2e       	mov	r0, r23
 168:	00 0c       	add	r0, r0
 16a:	88 0b       	sbc	r24, r24
 16c:	99 0b       	sbc	r25, r25
 16e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__floatsisf>
 172:	26 e4       	ldi	r18, 0x46	; 70
 174:	36 eb       	ldi	r19, 0xB6	; 182
 176:	43 e7       	ldi	r20, 0x73	; 115
 178:	5e e3       	ldi	r21, 0x3E	; 62
 17a:	0e 94 5f 01 	call	0x2be	; 0x2be <__mulsf3>
 17e:	0e 94 ca 00 	call	0x194	; 0x194 <__fixunssfsi>
 182:	67 bd       	out	0x27, r22	; 39
		}
		if (motor == 0) {
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 18c:	89 2b       	or	r24, r25
 18e:	89 f6       	brne	.-94     	; 0x132 <main+0x10>
			OCR0A = 0;
 190:	17 bc       	out	0x27, r1	; 39
 192:	cf cf       	rjmp	.-98     	; 0x132 <main+0x10>

00000194 <__fixunssfsi>:
 194:	0e 94 3e 01 	call	0x27c	; 0x27c <__fp_splitA>
 198:	88 f0       	brcs	.+34     	; 0x1bc <__fixunssfsi+0x28>
 19a:	9f 57       	subi	r25, 0x7F	; 127
 19c:	98 f0       	brcs	.+38     	; 0x1c4 <__fixunssfsi+0x30>
 19e:	b9 2f       	mov	r27, r25
 1a0:	99 27       	eor	r25, r25
 1a2:	b7 51       	subi	r27, 0x17	; 23
 1a4:	b0 f0       	brcs	.+44     	; 0x1d2 <__fixunssfsi+0x3e>
 1a6:	e1 f0       	breq	.+56     	; 0x1e0 <__fixunssfsi+0x4c>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	1a f0       	brmi	.+6      	; 0x1b8 <__fixunssfsi+0x24>
 1b2:	ba 95       	dec	r27
 1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__fixunssfsi+0x14>
 1b6:	14 c0       	rjmp	.+40     	; 0x1e0 <__fixunssfsi+0x4c>
 1b8:	b1 30       	cpi	r27, 0x01	; 1
 1ba:	91 f0       	breq	.+36     	; 0x1e0 <__fixunssfsi+0x4c>
 1bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__fp_zero>
 1c0:	b1 e0       	ldi	r27, 0x01	; 1
 1c2:	08 95       	ret
 1c4:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__fp_zero>
 1c8:	67 2f       	mov	r22, r23
 1ca:	78 2f       	mov	r23, r24
 1cc:	88 27       	eor	r24, r24
 1ce:	b8 5f       	subi	r27, 0xF8	; 248
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <__fixunssfsi+0x4c>
 1d2:	b9 3f       	cpi	r27, 0xF9	; 249
 1d4:	cc f3       	brlt	.-14     	; 0x1c8 <__fixunssfsi+0x34>
 1d6:	86 95       	lsr	r24
 1d8:	77 95       	ror	r23
 1da:	67 95       	ror	r22
 1dc:	b3 95       	inc	r27
 1de:	d9 f7       	brne	.-10     	; 0x1d6 <__fixunssfsi+0x42>
 1e0:	3e f4       	brtc	.+14     	; 0x1f0 <__fixunssfsi+0x5c>
 1e2:	90 95       	com	r25
 1e4:	80 95       	com	r24
 1e6:	70 95       	com	r23
 1e8:	61 95       	neg	r22
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	8f 4f       	sbci	r24, 0xFF	; 255
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	08 95       	ret

000001f2 <__floatunsisf>:
 1f2:	e8 94       	clt
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <__floatsisf+0x12>

000001f6 <__floatsisf>:
 1f6:	97 fb       	bst	r25, 7
 1f8:	3e f4       	brtc	.+14     	; 0x208 <__floatsisf+0x12>
 1fa:	90 95       	com	r25
 1fc:	80 95       	com	r24
 1fe:	70 95       	com	r23
 200:	61 95       	neg	r22
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	8f 4f       	sbci	r24, 0xFF	; 255
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	99 23       	and	r25, r25
 20a:	a9 f0       	breq	.+42     	; 0x236 <__floatsisf+0x40>
 20c:	f9 2f       	mov	r31, r25
 20e:	96 e9       	ldi	r25, 0x96	; 150
 210:	bb 27       	eor	r27, r27
 212:	93 95       	inc	r25
 214:	f6 95       	lsr	r31
 216:	87 95       	ror	r24
 218:	77 95       	ror	r23
 21a:	67 95       	ror	r22
 21c:	b7 95       	ror	r27
 21e:	f1 11       	cpse	r31, r1
 220:	f8 cf       	rjmp	.-16     	; 0x212 <__floatsisf+0x1c>
 222:	fa f4       	brpl	.+62     	; 0x262 <__floatsisf+0x6c>
 224:	bb 0f       	add	r27, r27
 226:	11 f4       	brne	.+4      	; 0x22c <__floatsisf+0x36>
 228:	60 ff       	sbrs	r22, 0
 22a:	1b c0       	rjmp	.+54     	; 0x262 <__floatsisf+0x6c>
 22c:	6f 5f       	subi	r22, 0xFF	; 255
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	8f 4f       	sbci	r24, 0xFF	; 255
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	16 c0       	rjmp	.+44     	; 0x262 <__floatsisf+0x6c>
 236:	88 23       	and	r24, r24
 238:	11 f0       	breq	.+4      	; 0x23e <__floatsisf+0x48>
 23a:	96 e9       	ldi	r25, 0x96	; 150
 23c:	11 c0       	rjmp	.+34     	; 0x260 <__floatsisf+0x6a>
 23e:	77 23       	and	r23, r23
 240:	21 f0       	breq	.+8      	; 0x24a <__floatsisf+0x54>
 242:	9e e8       	ldi	r25, 0x8E	; 142
 244:	87 2f       	mov	r24, r23
 246:	76 2f       	mov	r23, r22
 248:	05 c0       	rjmp	.+10     	; 0x254 <__floatsisf+0x5e>
 24a:	66 23       	and	r22, r22
 24c:	71 f0       	breq	.+28     	; 0x26a <__floatsisf+0x74>
 24e:	96 e8       	ldi	r25, 0x86	; 134
 250:	86 2f       	mov	r24, r22
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	2a f0       	brmi	.+10     	; 0x262 <__floatsisf+0x6c>
 258:	9a 95       	dec	r25
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	da f7       	brpl	.-10     	; 0x258 <__floatsisf+0x62>
 262:	88 0f       	add	r24, r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	97 f9       	bld	r25, 7
 26a:	08 95       	ret

0000026c <__fp_split3>:
 26c:	57 fd       	sbrc	r21, 7
 26e:	90 58       	subi	r25, 0x80	; 128
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	59 f0       	breq	.+22     	; 0x28c <__fp_splitA+0x10>
 276:	5f 3f       	cpi	r21, 0xFF	; 255
 278:	71 f0       	breq	.+28     	; 0x296 <__fp_splitA+0x1a>
 27a:	47 95       	ror	r20

0000027c <__fp_splitA>:
 27c:	88 0f       	add	r24, r24
 27e:	97 fb       	bst	r25, 7
 280:	99 1f       	adc	r25, r25
 282:	61 f0       	breq	.+24     	; 0x29c <__fp_splitA+0x20>
 284:	9f 3f       	cpi	r25, 0xFF	; 255
 286:	79 f0       	breq	.+30     	; 0x2a6 <__fp_splitA+0x2a>
 288:	87 95       	ror	r24
 28a:	08 95       	ret
 28c:	12 16       	cp	r1, r18
 28e:	13 06       	cpc	r1, r19
 290:	14 06       	cpc	r1, r20
 292:	55 1f       	adc	r21, r21
 294:	f2 cf       	rjmp	.-28     	; 0x27a <__fp_split3+0xe>
 296:	46 95       	lsr	r20
 298:	f1 df       	rcall	.-30     	; 0x27c <__fp_splitA>
 29a:	08 c0       	rjmp	.+16     	; 0x2ac <__fp_splitA+0x30>
 29c:	16 16       	cp	r1, r22
 29e:	17 06       	cpc	r1, r23
 2a0:	18 06       	cpc	r1, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	f1 cf       	rjmp	.-30     	; 0x288 <__fp_splitA+0xc>
 2a6:	86 95       	lsr	r24
 2a8:	71 05       	cpc	r23, r1
 2aa:	61 05       	cpc	r22, r1
 2ac:	08 94       	sec
 2ae:	08 95       	ret

000002b0 <__fp_zero>:
 2b0:	e8 94       	clt

000002b2 <__fp_szero>:
 2b2:	bb 27       	eor	r27, r27
 2b4:	66 27       	eor	r22, r22
 2b6:	77 27       	eor	r23, r23
 2b8:	cb 01       	movw	r24, r22
 2ba:	97 f9       	bld	r25, 7
 2bc:	08 95       	ret

000002be <__mulsf3>:
 2be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__mulsf3x>
 2c2:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__fp_round>
 2c6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__fp_pscA>
 2ca:	38 f0       	brcs	.+14     	; 0x2da <__mulsf3+0x1c>
 2cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fp_pscB>
 2d0:	20 f0       	brcs	.+8      	; 0x2da <__mulsf3+0x1c>
 2d2:	95 23       	and	r25, r21
 2d4:	11 f0       	breq	.+4      	; 0x2da <__mulsf3+0x1c>
 2d6:	0c 94 cc 01 	jmp	0x398	; 0x398 <__fp_inf>
 2da:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__fp_nan>
 2de:	11 24       	eor	r1, r1
 2e0:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__fp_szero>

000002e4 <__mulsf3x>:
 2e4:	0e 94 36 01 	call	0x26c	; 0x26c <__fp_split3>
 2e8:	70 f3       	brcs	.-36     	; 0x2c6 <__mulsf3+0x8>

000002ea <__mulsf3_pse>:
 2ea:	95 9f       	mul	r25, r21
 2ec:	c1 f3       	breq	.-16     	; 0x2de <__mulsf3+0x20>
 2ee:	95 0f       	add	r25, r21
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	55 1f       	adc	r21, r21
 2f4:	62 9f       	mul	r22, r18
 2f6:	f0 01       	movw	r30, r0
 2f8:	72 9f       	mul	r23, r18
 2fa:	bb 27       	eor	r27, r27
 2fc:	f0 0d       	add	r31, r0
 2fe:	b1 1d       	adc	r27, r1
 300:	63 9f       	mul	r22, r19
 302:	aa 27       	eor	r26, r26
 304:	f0 0d       	add	r31, r0
 306:	b1 1d       	adc	r27, r1
 308:	aa 1f       	adc	r26, r26
 30a:	64 9f       	mul	r22, r20
 30c:	66 27       	eor	r22, r22
 30e:	b0 0d       	add	r27, r0
 310:	a1 1d       	adc	r26, r1
 312:	66 1f       	adc	r22, r22
 314:	82 9f       	mul	r24, r18
 316:	22 27       	eor	r18, r18
 318:	b0 0d       	add	r27, r0
 31a:	a1 1d       	adc	r26, r1
 31c:	62 1f       	adc	r22, r18
 31e:	73 9f       	mul	r23, r19
 320:	b0 0d       	add	r27, r0
 322:	a1 1d       	adc	r26, r1
 324:	62 1f       	adc	r22, r18
 326:	83 9f       	mul	r24, r19
 328:	a0 0d       	add	r26, r0
 32a:	61 1d       	adc	r22, r1
 32c:	22 1f       	adc	r18, r18
 32e:	74 9f       	mul	r23, r20
 330:	33 27       	eor	r19, r19
 332:	a0 0d       	add	r26, r0
 334:	61 1d       	adc	r22, r1
 336:	23 1f       	adc	r18, r19
 338:	84 9f       	mul	r24, r20
 33a:	60 0d       	add	r22, r0
 33c:	21 1d       	adc	r18, r1
 33e:	82 2f       	mov	r24, r18
 340:	76 2f       	mov	r23, r22
 342:	6a 2f       	mov	r22, r26
 344:	11 24       	eor	r1, r1
 346:	9f 57       	subi	r25, 0x7F	; 127
 348:	50 40       	sbci	r21, 0x00	; 0
 34a:	9a f0       	brmi	.+38     	; 0x372 <__mulsf3_pse+0x88>
 34c:	f1 f0       	breq	.+60     	; 0x38a <__mulsf3_pse+0xa0>
 34e:	88 23       	and	r24, r24
 350:	4a f0       	brmi	.+18     	; 0x364 <__mulsf3_pse+0x7a>
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	bb 1f       	adc	r27, r27
 358:	66 1f       	adc	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	91 50       	subi	r25, 0x01	; 1
 360:	50 40       	sbci	r21, 0x00	; 0
 362:	a9 f7       	brne	.-22     	; 0x34e <__mulsf3_pse+0x64>
 364:	9e 3f       	cpi	r25, 0xFE	; 254
 366:	51 05       	cpc	r21, r1
 368:	80 f0       	brcs	.+32     	; 0x38a <__mulsf3_pse+0xa0>
 36a:	0c 94 cc 01 	jmp	0x398	; 0x398 <__fp_inf>
 36e:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__fp_szero>
 372:	5f 3f       	cpi	r21, 0xFF	; 255
 374:	e4 f3       	brlt	.-8      	; 0x36e <__mulsf3_pse+0x84>
 376:	98 3e       	cpi	r25, 0xE8	; 232
 378:	d4 f3       	brlt	.-12     	; 0x36e <__mulsf3_pse+0x84>
 37a:	86 95       	lsr	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b7 95       	ror	r27
 382:	f7 95       	ror	r31
 384:	e7 95       	ror	r30
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	c1 f7       	brne	.-16     	; 0x37a <__mulsf3_pse+0x90>
 38a:	fe 2b       	or	r31, r30
 38c:	88 0f       	add	r24, r24
 38e:	91 1d       	adc	r25, r1
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	97 f9       	bld	r25, 7
 396:	08 95       	ret

00000398 <__fp_inf>:
 398:	97 f9       	bld	r25, 7
 39a:	9f 67       	ori	r25, 0x7F	; 127
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	08 95       	ret

000003a4 <__fp_nan>:
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	80 ec       	ldi	r24, 0xC0	; 192
 3a8:	08 95       	ret

000003aa <__fp_pscA>:
 3aa:	00 24       	eor	r0, r0
 3ac:	0a 94       	dec	r0
 3ae:	16 16       	cp	r1, r22
 3b0:	17 06       	cpc	r1, r23
 3b2:	18 06       	cpc	r1, r24
 3b4:	09 06       	cpc	r0, r25
 3b6:	08 95       	ret

000003b8 <__fp_pscB>:
 3b8:	00 24       	eor	r0, r0
 3ba:	0a 94       	dec	r0
 3bc:	12 16       	cp	r1, r18
 3be:	13 06       	cpc	r1, r19
 3c0:	14 06       	cpc	r1, r20
 3c2:	05 06       	cpc	r0, r21
 3c4:	08 95       	ret

000003c6 <__fp_round>:
 3c6:	09 2e       	mov	r0, r25
 3c8:	03 94       	inc	r0
 3ca:	00 0c       	add	r0, r0
 3cc:	11 f4       	brne	.+4      	; 0x3d2 <__fp_round+0xc>
 3ce:	88 23       	and	r24, r24
 3d0:	52 f0       	brmi	.+20     	; 0x3e6 <__fp_round+0x20>
 3d2:	bb 0f       	add	r27, r27
 3d4:	40 f4       	brcc	.+16     	; 0x3e6 <__fp_round+0x20>
 3d6:	bf 2b       	or	r27, r31
 3d8:	11 f4       	brne	.+4      	; 0x3de <__fp_round+0x18>
 3da:	60 ff       	sbrs	r22, 0
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <__fp_round+0x20>
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
