
DA2C_Task1_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000693  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
	DDRB = (1<<DDB2); // Make PB2 Output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = (0<<DDB2); // Turn on LED
  84:	15 b8       	out	0x05, r1	; 5
	TCCR0A = 0; // Normal Mode
  86:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 5; // Set prescaler to 1024
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	85 bd       	out	0x25, r24	; 37
		// Delay for 6796
		while (ovrflow < 26) { // Gets to 6656
			while ((TIFR0 & 0x01) == 0) {}
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
			TIFR0 = 1; // reset ovf flag
  8c:	21 e0       	ldi	r18, 0x01	; 1
		}
		while (TCNT0 < 140) {} // 6656+140 = 6796
		
		PORTB ^= (1<<DDB2); // Turn off LED
  8e:	34 e0       	ldi	r19, 0x04	; 4
	TCCR0A = 0; // Normal Mode
	TCCR0B = 5; // Set prescaler to 1024
	int ovrflow = 0; // overflow counter
    while (1) 
    {
		TCNT0 = 0; // Reset counter
  90:	16 bc       	out	0x26, r1	; 38
  92:	8a e1       	ldi	r24, 0x1A	; 26
  94:	90 e0       	ldi	r25, 0x00	; 0
		ovrflow = 0; // Reset overflow counter
		
		// Delay for 6796
		while (ovrflow < 26) { // Gets to 6656
			while ((TIFR0 & 0x01) == 0) {}
  96:	a8 9b       	sbis	0x15, 0	; 21
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x16>
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
  9a:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 1; // reset ovf flag
  9c:	25 bb       	out	0x15, r18	; 21
  9e:	01 97       	sbiw	r24, 0x01	; 1
    {
		TCNT0 = 0; // Reset counter
		ovrflow = 0; // Reset overflow counter
		
		// Delay for 6796
		while (ovrflow < 26) { // Gets to 6656
  a0:	d1 f7       	brne	.-12     	; 0x96 <main+0x16>
			while ((TIFR0 & 0x01) == 0) {}
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
			TIFR0 = 1; // reset ovf flag
		}
		while (TCNT0 < 140) {} // 6656+140 = 6796
  a2:	86 b5       	in	r24, 0x26	; 38
  a4:	8c 38       	cpi	r24, 0x8C	; 140
  a6:	e8 f3       	brcs	.-6      	; 0xa2 <main+0x22>
		
		PORTB ^= (1<<DDB2); // Turn off LED
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	83 27       	eor	r24, r19
  ac:	85 b9       	out	0x05, r24	; 5
		TCNT0 = 0;	// reset counter
  ae:	16 bc       	out	0x26, r1	; 38
  b0:	81 e1       	ldi	r24, 0x11	; 17
  b2:	90 e0       	ldi	r25, 0x00	; 0
		ovrflow = 0; // reset ovrflow counter
		
		// Delay for 4531
		while (ovrflow < 17) { // 4352
			while ((TIFR0 & 0x01) == 0) {}
  b4:	a8 9b       	sbis	0x15, 0	; 21
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x34>
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
  b8:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 1; // reset ovf flag
  ba:	25 bb       	out	0x15, r18	; 21
  bc:	01 97       	sbiw	r24, 0x01	; 1
		PORTB ^= (1<<DDB2); // Turn off LED
		TCNT0 = 0;	// reset counter
		ovrflow = 0; // reset ovrflow counter
		
		// Delay for 4531
		while (ovrflow < 17) { // 4352
  be:	d1 f7       	brne	.-12     	; 0xb4 <main+0x34>
			while ((TIFR0 & 0x01) == 0) {}
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
			TIFR0 = 1; // reset ovf flag
		}
		while (TCNT0 < 179) {} // 4352+179 = 4531
  c0:	86 b5       	in	r24, 0x26	; 38
  c2:	83 3b       	cpi	r24, 0xB3	; 179
  c4:	e8 f3       	brcs	.-6      	; 0xc0 <main+0x40>
		PORTB ^= (1<<DDB2); // Turn on LED
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	83 27       	eor	r24, r19
  ca:	85 b9       	out	0x05, r24	; 5
    }
  cc:	e1 cf       	rjmp	.-62     	; 0x90 <main+0x10>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
