
DA2C_Task1_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000693  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000226  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000013e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <stdio.h>

int main(void)
{
	DDRB = (1<<DDB2); // Make PB2 Output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	DDRC = (0<<DDC2); // Make PC2 Input
  84:	17 b8       	out	0x07, r1	; 7
	PORTB = (1<<DDB2); // Turn off LED
  86:	85 b9       	out	0x05, r24	; 5
	PORTC = (1<<DDC2); // Turn on pull-up transistor
  88:	88 b9       	out	0x08, r24	; 8
	TCCR0A = 0; // Normal Mode
  8a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 5; // Set prescaler to 1024
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
	int ovrflow = 0; // overflow counter
	while (1)
	{
		if (!(PINC & (1 << PINC2))) {	// if button pressed
		PORTB ^= (1<<DDB2); // Turn on LED	
  90:	34 e0       	ldi	r19, 0x04	; 4
		// Delay for 1.25 sec (19531 TCNT)
		while (ovrflow < 76) { // Gets to 19456
			while ((TIFR0 & 0x01) == 0) {}
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
			TIFR0 = 1; // reset ovf flag
  92:	21 e0       	ldi	r18, 0x01	; 1
	TCCR0A = 0; // Normal Mode
	TCCR0B = 5; // Set prescaler to 1024
	int ovrflow = 0; // overflow counter
	while (1)
	{
		if (!(PINC & (1 << PINC2))) {	// if button pressed
  94:	32 99       	sbic	0x06, 2	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x14>
		PORTB ^= (1<<DDB2); // Turn on LED	
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	83 27       	eor	r24, r19
  9c:	85 b9       	out	0x05, r24	; 5
		TCNT0 = 0; // Reset counter
  9e:	16 bc       	out	0x26, r1	; 38
  a0:	8c e4       	ldi	r24, 0x4C	; 76
  a2:	90 e0       	ldi	r25, 0x00	; 0
		ovrflow = 0; // Reset overflow counter
		

		// Delay for 1.25 sec (19531 TCNT)
		while (ovrflow < 76) { // Gets to 19456
			while ((TIFR0 & 0x01) == 0) {}
  a4:	a8 9b       	sbis	0x15, 0	; 21
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x24>
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
  a8:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 1; // reset ovf flag
  aa:	25 bb       	out	0x15, r18	; 21
  ac:	01 97       	sbiw	r24, 0x01	; 1
		TCNT0 = 0; // Reset counter
		ovrflow = 0; // Reset overflow counter
		

		// Delay for 1.25 sec (19531 TCNT)
		while (ovrflow < 76) { // Gets to 19456
  ae:	d1 f7       	brne	.-12     	; 0xa4 <main+0x24>
			while ((TIFR0 & 0x01) == 0) {}
			ovrflow++; // increment ovrflow
			TCNT0 = 0; // reset counter
			TIFR0 = 1; // reset ovf flag
		}
		while (TCNT0 < 75) {} // 19456+75 = 19531
  b0:	86 b5       	in	r24, 0x26	; 38
  b2:	8b 34       	cpi	r24, 0x4B	; 75
  b4:	e8 f3       	brcs	.-6      	; 0xb0 <main+0x30>
		
		PORTB ^= (1<<DDB2); // Turn off LED
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	83 27       	eor	r24, r19
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	eb cf       	rjmp	.-42     	; 0x94 <main+0x14>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
