
DA2C_Task2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ab  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000248  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int ovrflow = 0; // global ovrflow counter

int main(void)
{
	DDRB = (1<<DDB2); // Make PB2 Output
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = (0<<DDB2); // Turn on LED
  94:	15 b8       	out	0x05, r1	; 5
	TIMSK0 |= (1<<TOIE0); // Set up interrupt
  96:	ee e6       	ldi	r30, 0x6E	; 110
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 83       	st	Z, r24
	TCCR0A = 0; // Normal Mode
  a0:	14 bc       	out	0x24, r1	; 36
	sei(); // interrupt enable
  a2:	78 94       	sei
	TCCR0B = 5; // Set prescaler to 1024
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	85 bd       	out	0x25, r24	; 37
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x18>

000000aa <__vector_16>:
	{
		
	}
}

ISR (TIMER0_OVF_vect) {
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	ovrflow++; //increment ovrflow
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (ovrflow == 26) { // delay for .435s
  ca:	8a 31       	cpi	r24, 0x1A	; 26
  cc:	91 05       	cpc	r25, r1
  ce:	51 f4       	brne	.+20     	; 0xe4 <__vector_16+0x3a>
		TCNT0 = 0;
  d0:	16 bc       	out	0x26, r1	; 38
		while (TCNT0 < 140) {}
  d2:	86 b5       	in	r24, 0x26	; 38
  d4:	8c 38       	cpi	r24, 0x8C	; 140
  d6:	e8 f3       	brcs	.-6      	; 0xd2 <__vector_16+0x28>
		PORTB ^= (1<<DDB2); // Turn OFF
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	89 27       	eor	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
		TCNT0 = 0; // reset counter
  e0:	16 bc       	out	0x26, r1	; 38
  e2:	0f c0       	rjmp	.+30     	; 0x102 <__vector_16+0x58>
	}
	else if (ovrflow == 43) { // delay for .29s
  e4:	8b 97       	sbiw	r24, 0x2b	; 43
  e6:	69 f4       	brne	.+26     	; 0x102 <__vector_16+0x58>
		TCNT0 = 0;
  e8:	16 bc       	out	0x26, r1	; 38
		while (TCNT0 < 179) {}
  ea:	86 b5       	in	r24, 0x26	; 38
  ec:	83 3b       	cpi	r24, 0xB3	; 179
  ee:	e8 f3       	brcs	.-6      	; 0xea <__vector_16+0x40>
		PORTB ^= (1<<DDB2); // Turn ON
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	89 27       	eor	r24, r25
  f6:	85 b9       	out	0x05, r24	; 5
		ovrflow = 0; // reset ovrflow
  f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		TCNT0 = 0; // reset counter
 100:	16 bc       	out	0x26, r1	; 38
	}
	TCNT0 = 0;
 102:	16 bc       	out	0x26, r1	; 38
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
