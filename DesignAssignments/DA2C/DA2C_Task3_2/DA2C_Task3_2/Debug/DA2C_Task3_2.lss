
DA2C_Task3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ab  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000266  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int ovrflow = 0; // global ovrflow counter

int main(void)
{
	DDRB |= (1<<DDB2); // Make PB2 Output
  90:	22 9a       	sbi	0x04, 2	; 4
	DDRC &= (0<<DDC2); // Make PC2 Input
  92:	87 b1       	in	r24, 0x07	; 7
  94:	17 b8       	out	0x07, r1	; 7
	PORTB |= (1<<DDB2); // Turn off LED
  96:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<DDC2); // Turn on pull-up transistor
  98:	42 9a       	sbi	0x08, 2	; 8
	TIMSK0 |= (1<<OCIE0A); // Set up interrupt
  9a:	ee e6       	ldi	r30, 0x6E	; 110
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01); // Normal Mode
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;
  ae:	16 bc       	out	0x26, r1	; 38
	sei();
  b0:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00); // Set prescaler to 1024
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	85 60       	ori	r24, 0x05	; 5
  b6:	85 bd       	out	0x25, r24	; 37
	while (1)
	{
		if (!(PINC & (1 << PINC2))) { // if button pressed
			PORTB ^= (1 << DDB2); // Turn on LED
  b8:	94 e0       	ldi	r25, 0x04	; 4
	TCNT0 = 0;
	sei();
	TCCR0B |= (1<<CS02) | (1<<CS00); // Set prescaler to 1024
	while (1)
	{
		if (!(PINC & (1 << PINC2))) { // if button pressed
  ba:	32 99       	sbic	0x06, 2	; 6
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <main+0x42>
			PORTB ^= (1 << DDB2); // Turn on LED
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	89 27       	eor	r24, r25
  c2:	85 b9       	out	0x05, r24	; 5
			TCNT0 = 0;
  c4:	16 bc       	out	0x26, r1	; 38
			ovrflow = 0;
  c6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			while (!(PORTB & (1<<PORTB2))) {} // while on
  ce:	2a 9b       	sbis	0x05, 2	; 5
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x3e>
		}
		ovrflow = 0;
  d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		
	}
  da:	ef cf       	rjmp	.-34     	; 0xba <main+0x2a>

000000dc <__vector_14>:
}

ISR (TIMER0_COMPA_vect) {
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	ovrflow++; //increment ovrflow
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (ovrflow == 76) {
  fc:	8c 34       	cpi	r24, 0x4C	; 76
  fe:	91 05       	cpc	r25, r1
 100:	41 f4       	brne	.+16     	; 0x112 <__vector_14+0x36>
		TCNT0 = 0;
 102:	16 bc       	out	0x26, r1	; 38
		while (TCNT0 < 75) {}
 104:	86 b5       	in	r24, 0x26	; 38
 106:	8b 34       	cpi	r24, 0x4B	; 75
 108:	e8 f3       	brcs	.-6      	; 0x104 <__vector_14+0x28>
		PORTB ^= (1<<DDB2); // Turn off LED
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	89 27       	eor	r24, r25
 110:	85 b9       	out	0x05, r24	; 5
	}
	TCNT0 = 0; //reset counter
 112:	16 bc       	out	0x26, r1	; 38
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
