
DA2A_Task1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000202  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <stdio.h>
#include <avr/io.h>

int main(void)
{
    DDRB = (1<<2); //Make PB2 Output
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	TCCR1B = 5;	// set prescaler to 1024
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
    while (1) 
    {
		TCNT1 = 0; // set timer/counter to 0
  8a:	e4 e8       	ldi	r30, 0x84	; 132
  8c:	f0 e0       	ldi	r31, 0x00	; 0
		while (TCNT1 != 6796) {
		//do nothing
		}
		PORTB ^= (1<<2); // toggle PB2 using xor
  8e:	24 e0       	ldi	r18, 0x04	; 4
    DDRB = (1<<2); //Make PB2 Output
	TCCR1B = 5;	// set prescaler to 1024
	
    while (1) 
    {
		TCNT1 = 0; // set timer/counter to 0
  90:	11 82       	std	Z+1, r1	; 0x01
  92:	10 82       	st	Z, r1
		while (TCNT1 != 6796) {
  94:	80 81       	ld	r24, Z
  96:	91 81       	ldd	r25, Z+1	; 0x01
  98:	8c 38       	cpi	r24, 0x8C	; 140
  9a:	9a 41       	sbci	r25, 0x1A	; 26
  9c:	d9 f7       	brne	.-10     	; 0x94 <main+0x14>
		//do nothing
		}
		PORTB ^= (1<<2); // toggle PB2 using xor
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	82 27       	eor	r24, r18
  a2:	85 b9       	out	0x05, r24	; 5
		TCNT1 = 0; // reset again
  a4:	11 82       	std	Z+1, r1	; 0x01
  a6:	10 82       	st	Z, r1
		while (TCNT1 != 4531) {
  a8:	80 81       	ld	r24, Z
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	83 3b       	cpi	r24, 0xB3	; 179
  ae:	91 41       	sbci	r25, 0x11	; 17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <main+0x28>
		// do nothing	
		}
		PORTB ^= (1<<2); // toggle PB2 using xor
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	82 27       	eor	r24, r18
  b6:	85 b9       	out	0x05, r24	; 5
    }
  b8:	eb cf       	rjmp	.-42     	; 0x90 <main+0x10>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
