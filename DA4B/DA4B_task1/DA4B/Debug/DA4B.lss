
DA4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ed  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000665  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c0  00000000  00000000  00000fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000360  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 57 00 	call	0xae	; 0xae <main>
  88:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
	TCCR1B = (1<<WGM12) | // CTC mode
			 (1<<CS11); // Prescaler 8
}

void ADC_init(void) {
	DDRC &= (0<<PORTC0); // PC0 as input
  90:	87 b1       	in	r24, 0x07	; 7
  92:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC1); // Pull up resistor
  94:	41 9a       	sbi	0x08, 1	; 8
	ADMUX |= (1<<REFS0); // REFERENCE VOLTAGE AT AREF
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	ADCSRA |=
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	87 68       	ori	r24, 0x87	; 135
  a8:	80 83       	st	Z, r24
	(1<<ADEN)| // ADC enable
	(1<<ADPS2)| // ADC
	(1<<ADPS1)| // Prescaler
	(1<<ADPS0); // 128
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
void ADC_init(void);

volatile int ADCvalue; // holds the value of ADC
int main(void)
{
	DDRB = 0x0F; // PORTB[3:0] set to output
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; // Initially set output to 0
  b2:	15 b8       	out	0x05, r1	; 5
	ADC_init(); // initializes ADC
  b4:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>

	}
}

void TIMER_init(void) {
	TCCR1B = (1<<WGM12) | // CTC mode
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ADC_init(); // initializes ADC
	TIMER_init(); // initializes TIMER
	
	while (1)
	{
		ADCSRA |= (1<<ADSC); // Start conversion
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0); // while not done converting do nothing
		ADCSRA |= (1<<ADIF); // reset converter
		ADCvalue = ADC; // store ADC to ADCvalue for debugging
  c2:	c8 e7       	ldi	r28, 0x78	; 120
  c4:	d0 e0       	ldi	r29, 0x00	; 0
		OCR1A = CONVERSION*ADCvalue; // 224/1024 is the ratio of the speed so that max speed is 95% of the pwm
  c6:	a8 e8       	ldi	r26, 0x88	; 136
  c8:	b0 e0       	ldi	r27, 0x00	; 0
		
		// Sequence
		PORTB = 0x09;					
  ca:	79 e0       	ldi	r23, 0x09	; 9
		while(!(TIFR1 & (1<<OCF1A)));   // Delays using CTC
		TIFR1 |= (1 << OCF1A);			// Resets
		PORTB = 0x03;
  cc:	63 e0       	ldi	r22, 0x03	; 3
		while(!(TIFR1 & (1<<OCF1A)));
		TIFR1 |= (1 << OCF1A);	
		PORTB = 0x06;
  ce:	56 e0       	ldi	r21, 0x06	; 6
		while(!(TIFR1 & (1<<OCF1A)));
		TIFR1 |= (1 << OCF1A);	
		PORTB = 0x0C;
  d0:	4c e0       	ldi	r20, 0x0C	; 12
	ADC_init(); // initializes ADC
	TIMER_init(); // initializes TIMER
	
	while (1)
	{
		ADCSRA |= (1<<ADSC); // Start conversion
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0); // while not done converting do nothing
  d8:	80 81       	ld	r24, Z
  da:	84 ff       	sbrs	r24, 4
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <main+0x2a>
		ADCSRA |= (1<<ADIF); // reset converter
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	80 83       	st	Z, r24
		ADCvalue = ADC; // store ADC to ADCvalue for debugging
  e4:	88 81       	ld	r24, Y
  e6:	99 81       	ldd	r25, Y+1	; 0x01
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR1A = CONVERSION*ADCvalue; // 224/1024 is the ratio of the speed so that max speed is 95% of the pwm
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	9c 01       	movw	r18, r24
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	82 0f       	add	r24, r18
 10c:	93 1f       	adc	r25, r19
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	9c 93       	st	X, r25
 112:	8e 93       	st	-X, r24
		
		// Sequence
		PORTB = 0x09;					
 114:	75 b9       	out	0x05, r23	; 5
		while(!(TIFR1 & (1<<OCF1A)));   // Delays using CTC
 116:	b1 9b       	sbis	0x16, 1	; 22
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x68>
		TIFR1 |= (1 << OCF1A);			// Resets
 11a:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x03;
 11c:	65 b9       	out	0x05, r22	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 11e:	b1 9b       	sbis	0x16, 1	; 22
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0x70>
		TIFR1 |= (1 << OCF1A);	
 122:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x06;
 124:	55 b9       	out	0x05, r21	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 126:	b1 9b       	sbis	0x16, 1	; 22
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0x78>
		TIFR1 |= (1 << OCF1A);	
 12a:	b1 9a       	sbi	0x16, 1	; 22
		PORTB = 0x0C;
 12c:	45 b9       	out	0x05, r20	; 5
		while(!(TIFR1 & (1<<OCF1A)));
 12e:	b1 9b       	sbis	0x16, 1	; 22
 130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x80>
		TIFR1 |= (1 << OCF1A);
 132:	b1 9a       	sbi	0x16, 1	; 22

	}
 134:	ce cf       	rjmp	.-100    	; 0xd2 <main+0x24>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
