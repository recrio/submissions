
DA4B_task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074c  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <TIMER_init>:
}

void TIMER_init(void)
{
	//Timer1
	TCCR1A = (1<<COM1A1) | // Clear OC1A on Compare non-inverting
  80:	82 ea       	ldi	r24, 0xA2	; 162
  82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
			 (1<<COM1B1) | //
			 (1<<WGM11)  ; // Fast
	TCCR1B = (1<<WGM13) |  // PWM
  86:	8b e1       	ldi	r24, 0x1B	; 27
  88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  8c:	08 95       	ret

0000008e <ADC_init>:
			 (1<<CS10);	  // 64
}

void ADC_init (void)
{
	ADMUX = (1<<REFS0);											// Set Aref
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// right-justified data
	ADCSRA |= (1<<ADEN) |	// ADC enable
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	87 6c       	ori	r24, 0xC7	; 199
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <main>:
void TIMER_init(void);
void ADC_init(void);

int main(void)
{
	ADC_init(); // initialize ADC settings
  a0:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_init>
	TIMER_init(); // initialize TIMER1
  a4:	0e 94 40 00 	call	0x80	; 0x80 <TIMER_init>
	
	
	while(1)
	{
		ADCSRA |= (1 << ADSC);	// Starts conversion
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0); // wait for conversion
		ADCSRA |= (1<<ADIF); // reset converter
		ICR1 = 4999; 	// fPWM = 50Hz
  ac:	46 e8       	ldi	r20, 0x86	; 134
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	27 e8       	ldi	r18, 0x87	; 135
  b2:	33 e1       	ldi	r19, 0x13	; 19
		DDRB |= (1<<PB1);	// Set PB1 as output
		OCR1A = ADC;	// Adjusts pulse width range
  b4:	c8 e7       	ldi	r28, 0x78	; 120
  b6:	d0 e0       	ldi	r29, 0x00	; 0
  b8:	08 e8       	ldi	r16, 0x88	; 136
  ba:	10 e0       	ldi	r17, 0x00	; 0
	TIMER_init(); // initialize TIMER1
	
	
	while(1)
	{
		ADCSRA |= (1 << ADSC);	// Starts conversion
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0); // wait for conversion
  c2:	80 81       	ld	r24, Z
  c4:	84 ff       	sbrs	r24, 4
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <main+0x22>
		ADCSRA |= (1<<ADIF); // reset converter
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
		ICR1 = 4999; 	// fPWM = 50Hz
  ce:	da 01       	movw	r26, r20
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	3c 93       	st	X, r19
  d4:	2e 93       	st	-X, r18
		DDRB |= (1<<PB1);	// Set PB1 as output
  d6:	21 9a       	sbi	0x04, 1	; 4
		OCR1A = ADC;	// Adjusts pulse width range
  d8:	88 81       	ld	r24, Y
  da:	99 81       	ldd	r25, Y+1	; 0x01
  dc:	d8 01       	movw	r26, r16
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	9c 93       	st	X, r25
  e2:	8e 93       	st	-X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	bf ef       	ldi	r27, 0xFF	; 255
  e6:	61 ee       	ldi	r22, 0xE1	; 225
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	b1 50       	subi	r27, 0x01	; 1
  ec:	60 40       	sbci	r22, 0x00	; 0
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x4a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x54>
  f4:	00 00       	nop
  f6:	e2 cf       	rjmp	.-60     	; 0xbc <main+0x1c>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
