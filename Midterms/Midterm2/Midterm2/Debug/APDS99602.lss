
APDS99602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  008001f8  008001f8  00000c54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb7  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c2  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000766  00000000  00000000  00002621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a8  00000000  00000000  000034bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3f       	cpi	r26, 0xF8	; 248
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 ef       	ldi	r26, 0xF8	; 248
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
  9e:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <i2c_stop>:
 232:	84 e9       	ldi	r24, 0x94	; 148
 234:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 238:	08 95       	ret

0000023a <USART_init>:
	}
}

void USART_init( void )
{
	UBRR0H = 0; // not needed
 23a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 8; // used for 115200
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0); /* Enable RX and TX */
 24a:	88 e1       	ldi	r24, 0x18	; 24
 24c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 250:	08 95       	ret

00000252 <USART_sendChar>:
}

void USART_sendChar(char ch) {
	while (!(UCSR0A & (1<<UDRE0))); // while data reg is not empty: hold
 252:	e0 ec       	ldi	r30, 0xC0	; 192
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <USART_sendChar+0x4>
	UDR0 = ch; // place character into reg
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 260:	08 95       	ret

00000262 <USART_sendString>:
}

void USART_sendString(char* str) {
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	fc 01       	movw	r30, r24
	while ((*str != '\0')) { // while not the end of the string
 26c:	80 81       	ld	r24, Z
 26e:	88 23       	and	r24, r24
 270:	79 f0       	breq	.+30     	; 0x290 <USART_sendString+0x2e>
 272:	8f 01       	movw	r16, r30
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	1f 4f       	sbci	r17, 0xFF	; 255
		while (!(UCSR0A & (1<<UDRE0))); // while data reg is not empty: hold
 278:	c0 ec       	ldi	r28, 0xC0	; 192
 27a:	d0 e0       	ldi	r29, 0x00	; 0
 27c:	98 81       	ld	r25, Y
 27e:	95 ff       	sbrs	r25, 5
 280:	fd cf       	rjmp	.-6      	; 0x27c <USART_sendString+0x1a>
		USART_sendChar(*str); //take in character to reg
 282:	0e 94 29 01 	call	0x252	; 0x252 <USART_sendChar>
	while (!(UCSR0A & (1<<UDRE0))); // while data reg is not empty: hold
	UDR0 = ch; // place character into reg
}

void USART_sendString(char* str) {
	while ((*str != '\0')) { // while not the end of the string
 286:	f8 01       	movw	r30, r16
 288:	81 91       	ld	r24, Z+
 28a:	8f 01       	movw	r16, r30
 28c:	81 11       	cpse	r24, r1
 28e:	f6 cf       	rjmp	.-20     	; 0x27c <USART_sendString+0x1a>
		while (!(UCSR0A & (1<<UDRE0))); // while data reg is not empty: hold
		USART_sendChar(*str); //take in character to reg
		str++; // next character
	}
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <AT_init>:

void AT_init(void) {
	USART_sendString("AT\r\n"); // Sends AT, expect OK
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	33 ed       	ldi	r19, 0xD3	; 211
 2a6:	80 e3       	ldi	r24, 0x30	; 48
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	30 40       	sbci	r19, 0x00	; 0
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <AT_init+0xe>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <AT_init+0x18>
 2b2:	00 00       	nop
	_delay_ms(1000);
	USART_sendString("AT+CWMODE=1\r\n"); // Sends mode set to station, expect OK
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	23 ed       	ldi	r18, 0xD3	; 211
 2c0:	30 e3       	ldi	r19, 0x30	; 48
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	30 40       	sbci	r19, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <AT_init+0x28>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <AT_init+0x32>
 2cc:	00 00       	nop
	_delay_ms(1000);
	USART_sendString("AT+CWDCHP=1,1\r\n");
 2ce:	83 e1       	ldi	r24, 0x13	; 19
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	93 ed       	ldi	r25, 0xD3	; 211
 2da:	20 e3       	ldi	r18, 0x30	; 48
 2dc:	81 50       	subi	r24, 0x01	; 1
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	20 40       	sbci	r18, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <AT_init+0x42>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <AT_init+0x4c>
 2e6:	00 00       	nop
	_delay_ms(1000);
	USART_sendString("AT+CWJAP=\"ATwifi\",\"ATpassword\"\r\n"); // Send command to  join guest wifi, expect OK
 2e8:	83 e2       	ldi	r24, 0x23	; 35
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 2f0:	34 e5       	ldi	r19, 0x54	; 84
 2f2:	85 e8       	ldi	r24, 0x85	; 133
 2f4:	95 e4       	ldi	r25, 0x45	; 69
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	31 50       	subi	r19, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	20 40       	sbci	r18, 0x00	; 0
 300:	d9 f7       	brne	.-10     	; 0x2f8 <AT_init+0x5e>
 302:	00 c0       	rjmp	.+0      	; 0x304 <AT_init+0x6a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <AT_init+0x6c>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <getValues>:
	_delay_ms(8000);
}

void getValues(void) {
 30a:	cf 93       	push	r28
	i2c_start(APDS9960_WRITE_ADR); // start writing
 30c:	82 e7       	ldi	r24, 0x72	; 114
 30e:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
	i2c_write(APDS9960_CDATAL); // point to CDATAL
 312:	84 e9       	ldi	r24, 0x94	; 148
 314:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
	i2c_stop(); // stop
 318:	0e 94 19 01 	call	0x232	; 0x232 <i2c_stop>
	
	i2c_start(APDS9960_READ_ADR); // read this time
 31c:	83 e7       	ldi	r24, 0x73	; 115
 31e:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
	//read all the values from CDATAL to BDATAH
	cl =((int)i2c_read_ack()|((int)i2c_read_ack()<<8));
 322:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 326:	c8 2f       	mov	r28, r24
 328:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 32c:	2c 2f       	mov	r18, r28
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	38 2b       	or	r19, r24
 332:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <cl+0x1>
 336:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <cl>
	r = ((int)i2c_read_ack()|((int)i2c_read_ack()<<8));
 33a:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 33e:	c8 2f       	mov	r28, r24
 340:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 344:	2c 2f       	mov	r18, r28
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	38 2b       	or	r19, r24
 34a:	30 93 fd 01 	sts	0x01FD, r19	; 0x8001fd <r+0x1>
 34e:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <r>
	g = ((int)i2c_read_ack()|((int)i2c_read_ack()<<8));
 352:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 356:	c8 2f       	mov	r28, r24
 358:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 35c:	2c 2f       	mov	r18, r28
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	38 2b       	or	r19, r24
 362:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <g+0x1>
 366:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <g>
	b = ((int)i2c_read_ack()|((int)i2c_read_ack()<<8));
 36a:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 36e:	c8 2f       	mov	r28, r24
 370:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 374:	2c 2f       	mov	r18, r28
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	38 2b       	or	r19, r24
 37a:	30 93 f9 01 	sts	0x01F9, r19	; 0x8001f9 <__data_end+0x1>
 37e:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <__data_end>
	i2c_stop(); // stop
 382:	0e 94 19 01 	call	0x232	; 0x232 <i2c_stop>
}
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <APDS_init>:

void APDS_init(void) {
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	1f 92       	push	r1
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	uint8_t data; // holds configuration bits
	// read device ID to see if it matches APDS9960
	i2c_readReg(APDS9960_WRITE_ADR | I2C_WRITE, APDS9960_ID, &data, 1);
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	ae 01       	movw	r20, r28
 39a:	4f 5f       	subi	r20, 0xFF	; 255
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	62 e9       	ldi	r22, 0x92	; 146
 3a0:	82 e7       	ldi	r24, 0x72	; 114
 3a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	if (data != APDS9960_ID_1) while(1); // if it does not match, loop forever
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	8b 3a       	cpi	r24, 0xAB	; 171
 3aa:	09 f0       	breq	.+2      	; 0x3ae <APDS_init+0x24>
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <APDS_init+0x22>
	
	//Turn on Power and Enable from ENABLE register
	data = APDS9960_PON | APDS9960_AEN;
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	89 83       	std	Y+1, r24	; 0x01
	i2c_writeReg(APDS9960_WRITE_ADR, APDS9960_ENABLE, &data, 1);
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	ae 01       	movw	r20, r28
 3b8:	4f 5f       	subi	r20, 0xFF	; 255
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	60 e8       	ldi	r22, 0x80	; 128
 3be:	82 e7       	ldi	r24, 0x72	; 114
 3c0:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	
	//Set Gain Control to default value 
	data = DEFAULT_AGAIN; // ALS Gain 4X 
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	89 83       	std	Y+1, r24	; 0x01
	i2c_writeReg(APDS9960_WRITE_ADR, APDS9960_CONTROL, &data, 1);
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	ae 01       	movw	r20, r28
 3ce:	4f 5f       	subi	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	6f e8       	ldi	r22, 0x8F	; 143
 3d4:	82 e7       	ldi	r24, 0x72	; 114
 3d6:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	
	//Set ALS Time to default
	data = DEFAULT_ATIME; // default value = 219
 3da:	8b ed       	ldi	r24, 0xDB	; 219
 3dc:	89 83       	std	Y+1, r24	; 0x01
	i2c_writeReg(APDS9960_WRITE_ADR, APDS9960_ATIME, &data, 1); 
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	ae 01       	movw	r20, r28
 3e4:	4f 5f       	subi	r20, 0xFF	; 255
 3e6:	5f 4f       	sbci	r21, 0xFF	; 255
 3e8:	61 e8       	ldi	r22, 0x81	; 129
 3ea:	82 e7       	ldi	r24, 0x72	; 114
 3ec:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>

 3f0:	0f 90       	pop	r0
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:
uint16_t cl, r, g, b; // holds clear, red, green, blue values
char sendValues[150]; // holds a string for sending values

int main(void)
{
	i2c_init(); // initialize i2c
 3f8:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	APDS_init(); // initialize APDS9960
 3fc:	0e 94 c5 01 	call	0x38a	; 0x38a <APDS_init>
	USART_init(); // initialize USART
 400:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_init>
	AT_init(); // initialize AT setttings	
 404:	0e 94 4d 01 	call	0x29a	; 0x29a <AT_init>
	while (1) // Loop forever
	{
		getValues(); // get 0x94 to 0x9B
		// convert line to string for sending
		snprintf(sendValues, sizeof(sendValues), 
 408:	04 e4       	ldi	r16, 0x44	; 68
 40a:	11 e0       	ldi	r17, 0x01	; 1
 40c:	0f 2e       	mov	r0, r31
 40e:	f6 e9       	ldi	r31, 0x96	; 150
 410:	ff 2e       	mov	r15, r31
 412:	f0 2d       	mov	r31, r0
 414:	c0 e0       	ldi	r28, 0x00	; 0
 416:	d2 e0       	ldi	r29, 0x02	; 2
	APDS_init(); // initialize APDS9960
	USART_init(); // initialize USART
	AT_init(); // initialize AT setttings	
	while (1) // Loop forever
	{
		getValues(); // get 0x94 to 0x9B
 418:	0e 94 85 01 	call	0x30a	; 0x30a <getValues>
		// convert line to string for sending
		snprintf(sendValues, sizeof(sendValues), 
 41c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <__data_end+0x1>
 420:	8f 93       	push	r24
 422:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <__data_end>
 426:	8f 93       	push	r24
 428:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <g+0x1>
 42c:	8f 93       	push	r24
 42e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <g>
 432:	8f 93       	push	r24
 434:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <r+0x1>
 438:	8f 93       	push	r24
 43a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <r>
 43e:	8f 93       	push	r24
 440:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <cl+0x1>
 444:	8f 93       	push	r24
 446:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <cl>
 44a:	8f 93       	push	r24
 44c:	1f 93       	push	r17
 44e:	0f 93       	push	r16
 450:	1f 92       	push	r1
 452:	ff 92       	push	r15
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <snprintf>
			"GET https://api.thingspeak.com/update?api_key=LLCMG4KU5R9UWD9F&field1=%d&field2=%d&field3=%d&field4=%d\r\n", cl, r, g, b);	
		USART_sendString("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"); //connect to thingspeak
 45c:	8d ea       	ldi	r24, 0xAD	; 173
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	2b e7       	ldi	r18, 0x7B	; 123
 468:	82 e9       	ldi	r24, 0x92	; 146
 46a:	91 50       	subi	r25, 0x01	; 1
 46c:	20 40       	sbci	r18, 0x00	; 0
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 474:	00 00       	nop
		_delay_ms(3000);
		USART_sendString("AT+CIPSEND=150\r\n"); // send data 150 characters
 476:	89 ed       	ldi	r24, 0xD9	; 217
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 47e:	9f ef       	ldi	r25, 0xFF	; 255
 480:	23 ed       	ldi	r18, 0xD3	; 211
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	91 50       	subi	r25, 0x01	; 1
 486:	20 40       	sbci	r18, 0x00	; 0
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
		_delay_ms(1000);
		USART_sendString(sendValues); // update channel using write key
 490:	ce 01       	movw	r24, r28
 492:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	23 ed       	ldi	r18, 0xD3	; 211
 49a:	80 e3       	ldi	r24, 0x30	; 48
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	20 40       	sbci	r18, 0x00	; 0
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
		_delay_ms(1000);
		USART_sendString("AT+CIPCLOSE\r\n"); // end of send
 4a8:	8a ee       	ldi	r24, 0xEA	; 234
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 31 01 	call	0x262	; 0x262 <USART_sendString>
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
 4b2:	23 e2       	ldi	r18, 0x23	; 35
 4b4:	84 ef       	ldi	r24, 0xF4	; 244
 4b6:	91 50       	subi	r25, 0x01	; 1
 4b8:	20 40       	sbci	r18, 0x00	; 0
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
 4c2:	8d b7       	in	r24, 0x3d	; 61
 4c4:	9e b7       	in	r25, 0x3e	; 62
 4c6:	0e 96       	adiw	r24, 0x0e	; 14
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	9e bf       	out	0x3e, r25	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	8d bf       	out	0x3d, r24	; 61
 4d2:	a2 cf       	rjmp	.-188    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

000004d4 <snprintf>:
 4d4:	ae e0       	ldi	r26, 0x0E	; 14
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e0 e7       	ldi	r30, 0x70	; 112
 4da:	f2 e0       	ldi	r31, 0x02	; 2
 4dc:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__prologue_saves__+0x1c>
 4e0:	0d 89       	ldd	r16, Y+21	; 0x15
 4e2:	1e 89       	ldd	r17, Y+22	; 0x16
 4e4:	8f 89       	ldd	r24, Y+23	; 0x17
 4e6:	98 8d       	ldd	r25, Y+24	; 0x18
 4e8:	26 e0       	ldi	r18, 0x06	; 6
 4ea:	2c 83       	std	Y+4, r18	; 0x04
 4ec:	1a 83       	std	Y+2, r17	; 0x02
 4ee:	09 83       	std	Y+1, r16	; 0x01
 4f0:	97 ff       	sbrs	r25, 7
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <snprintf+0x24>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e8       	ldi	r25, 0x80	; 128
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	9e 83       	std	Y+6, r25	; 0x06
 4fc:	8d 83       	std	Y+5, r24	; 0x05
 4fe:	ae 01       	movw	r20, r28
 500:	45 5e       	subi	r20, 0xE5	; 229
 502:	5f 4f       	sbci	r21, 0xFF	; 255
 504:	69 8d       	ldd	r22, Y+25	; 0x19
 506:	7a 8d       	ldd	r23, Y+26	; 0x1a
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 9a 02 	call	0x534	; 0x534 <vfprintf>
 510:	4d 81       	ldd	r20, Y+5	; 0x05
 512:	5e 81       	ldd	r21, Y+6	; 0x06
 514:	57 fd       	sbrc	r21, 7
 516:	0a c0       	rjmp	.+20     	; 0x52c <snprintf+0x58>
 518:	2f 81       	ldd	r18, Y+7	; 0x07
 51a:	38 85       	ldd	r19, Y+8	; 0x08
 51c:	42 17       	cp	r20, r18
 51e:	53 07       	cpc	r21, r19
 520:	0c f4       	brge	.+2      	; 0x524 <snprintf+0x50>
 522:	9a 01       	movw	r18, r20
 524:	f8 01       	movw	r30, r16
 526:	e2 0f       	add	r30, r18
 528:	f3 1f       	adc	r31, r19
 52a:	10 82       	st	Z, r1
 52c:	2e 96       	adiw	r28, 0x0e	; 14
 52e:	e4 e0       	ldi	r30, 0x04	; 4
 530:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__epilogue_restores__+0x1c>

00000534 <vfprintf>:
 534:	ab e0       	ldi	r26, 0x0B	; 11
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e0 ea       	ldi	r30, 0xA0	; 160
 53a:	f2 e0       	ldi	r31, 0x02	; 2
 53c:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__prologue_saves__>
 540:	6c 01       	movw	r12, r24
 542:	7b 01       	movw	r14, r22
 544:	8a 01       	movw	r16, r20
 546:	fc 01       	movw	r30, r24
 548:	17 82       	std	Z+7, r1	; 0x07
 54a:	16 82       	std	Z+6, r1	; 0x06
 54c:	83 81       	ldd	r24, Z+3	; 0x03
 54e:	81 ff       	sbrs	r24, 1
 550:	cc c1       	rjmp	.+920    	; 0x8ea <vfprintf+0x3b6>
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	3c 01       	movw	r6, r24
 558:	f6 01       	movw	r30, r12
 55a:	93 81       	ldd	r25, Z+3	; 0x03
 55c:	f7 01       	movw	r30, r14
 55e:	93 fd       	sbrc	r25, 3
 560:	85 91       	lpm	r24, Z+
 562:	93 ff       	sbrs	r25, 3
 564:	81 91       	ld	r24, Z+
 566:	7f 01       	movw	r14, r30
 568:	88 23       	and	r24, r24
 56a:	09 f4       	brne	.+2      	; 0x56e <vfprintf+0x3a>
 56c:	ba c1       	rjmp	.+884    	; 0x8e2 <vfprintf+0x3ae>
 56e:	85 32       	cpi	r24, 0x25	; 37
 570:	39 f4       	brne	.+14     	; 0x580 <vfprintf+0x4c>
 572:	93 fd       	sbrc	r25, 3
 574:	85 91       	lpm	r24, Z+
 576:	93 ff       	sbrs	r25, 3
 578:	81 91       	ld	r24, Z+
 57a:	7f 01       	movw	r14, r30
 57c:	85 32       	cpi	r24, 0x25	; 37
 57e:	29 f4       	brne	.+10     	; 0x58a <vfprintf+0x56>
 580:	b6 01       	movw	r22, r12
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 588:	e7 cf       	rjmp	.-50     	; 0x558 <vfprintf+0x24>
 58a:	91 2c       	mov	r9, r1
 58c:	21 2c       	mov	r2, r1
 58e:	31 2c       	mov	r3, r1
 590:	ff e1       	ldi	r31, 0x1F	; 31
 592:	f3 15       	cp	r31, r3
 594:	d8 f0       	brcs	.+54     	; 0x5cc <vfprintf+0x98>
 596:	8b 32       	cpi	r24, 0x2B	; 43
 598:	79 f0       	breq	.+30     	; 0x5b8 <vfprintf+0x84>
 59a:	38 f4       	brcc	.+14     	; 0x5aa <vfprintf+0x76>
 59c:	80 32       	cpi	r24, 0x20	; 32
 59e:	79 f0       	breq	.+30     	; 0x5be <vfprintf+0x8a>
 5a0:	83 32       	cpi	r24, 0x23	; 35
 5a2:	a1 f4       	brne	.+40     	; 0x5cc <vfprintf+0x98>
 5a4:	23 2d       	mov	r18, r3
 5a6:	20 61       	ori	r18, 0x10	; 16
 5a8:	1d c0       	rjmp	.+58     	; 0x5e4 <vfprintf+0xb0>
 5aa:	8d 32       	cpi	r24, 0x2D	; 45
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <vfprintf+0x92>
 5ae:	80 33       	cpi	r24, 0x30	; 48
 5b0:	69 f4       	brne	.+26     	; 0x5cc <vfprintf+0x98>
 5b2:	23 2d       	mov	r18, r3
 5b4:	21 60       	ori	r18, 0x01	; 1
 5b6:	16 c0       	rjmp	.+44     	; 0x5e4 <vfprintf+0xb0>
 5b8:	83 2d       	mov	r24, r3
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	38 2e       	mov	r3, r24
 5be:	e3 2d       	mov	r30, r3
 5c0:	e4 60       	ori	r30, 0x04	; 4
 5c2:	3e 2e       	mov	r3, r30
 5c4:	2a c0       	rjmp	.+84     	; 0x61a <vfprintf+0xe6>
 5c6:	f3 2d       	mov	r31, r3
 5c8:	f8 60       	ori	r31, 0x08	; 8
 5ca:	1d c0       	rjmp	.+58     	; 0x606 <vfprintf+0xd2>
 5cc:	37 fc       	sbrc	r3, 7
 5ce:	2d c0       	rjmp	.+90     	; 0x62a <vfprintf+0xf6>
 5d0:	20 ed       	ldi	r18, 0xD0	; 208
 5d2:	28 0f       	add	r18, r24
 5d4:	2a 30       	cpi	r18, 0x0A	; 10
 5d6:	40 f0       	brcs	.+16     	; 0x5e8 <vfprintf+0xb4>
 5d8:	8e 32       	cpi	r24, 0x2E	; 46
 5da:	b9 f4       	brne	.+46     	; 0x60a <vfprintf+0xd6>
 5dc:	36 fc       	sbrc	r3, 6
 5de:	81 c1       	rjmp	.+770    	; 0x8e2 <vfprintf+0x3ae>
 5e0:	23 2d       	mov	r18, r3
 5e2:	20 64       	ori	r18, 0x40	; 64
 5e4:	32 2e       	mov	r3, r18
 5e6:	19 c0       	rjmp	.+50     	; 0x61a <vfprintf+0xe6>
 5e8:	36 fe       	sbrs	r3, 6
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <vfprintf+0xc4>
 5ec:	8a e0       	ldi	r24, 0x0A	; 10
 5ee:	98 9e       	mul	r9, r24
 5f0:	20 0d       	add	r18, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	92 2e       	mov	r9, r18
 5f6:	11 c0       	rjmp	.+34     	; 0x61a <vfprintf+0xe6>
 5f8:	ea e0       	ldi	r30, 0x0A	; 10
 5fa:	2e 9e       	mul	r2, r30
 5fc:	20 0d       	add	r18, r0
 5fe:	11 24       	eor	r1, r1
 600:	22 2e       	mov	r2, r18
 602:	f3 2d       	mov	r31, r3
 604:	f0 62       	ori	r31, 0x20	; 32
 606:	3f 2e       	mov	r3, r31
 608:	08 c0       	rjmp	.+16     	; 0x61a <vfprintf+0xe6>
 60a:	8c 36       	cpi	r24, 0x6C	; 108
 60c:	21 f4       	brne	.+8      	; 0x616 <vfprintf+0xe2>
 60e:	83 2d       	mov	r24, r3
 610:	80 68       	ori	r24, 0x80	; 128
 612:	38 2e       	mov	r3, r24
 614:	02 c0       	rjmp	.+4      	; 0x61a <vfprintf+0xe6>
 616:	88 36       	cpi	r24, 0x68	; 104
 618:	41 f4       	brne	.+16     	; 0x62a <vfprintf+0xf6>
 61a:	f7 01       	movw	r30, r14
 61c:	93 fd       	sbrc	r25, 3
 61e:	85 91       	lpm	r24, Z+
 620:	93 ff       	sbrs	r25, 3
 622:	81 91       	ld	r24, Z+
 624:	7f 01       	movw	r14, r30
 626:	81 11       	cpse	r24, r1
 628:	b3 cf       	rjmp	.-154    	; 0x590 <vfprintf+0x5c>
 62a:	98 2f       	mov	r25, r24
 62c:	9f 7d       	andi	r25, 0xDF	; 223
 62e:	95 54       	subi	r25, 0x45	; 69
 630:	93 30       	cpi	r25, 0x03	; 3
 632:	28 f4       	brcc	.+10     	; 0x63e <vfprintf+0x10a>
 634:	0c 5f       	subi	r16, 0xFC	; 252
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	9f e3       	ldi	r25, 0x3F	; 63
 63a:	99 83       	std	Y+1, r25	; 0x01
 63c:	0d c0       	rjmp	.+26     	; 0x658 <vfprintf+0x124>
 63e:	83 36       	cpi	r24, 0x63	; 99
 640:	31 f0       	breq	.+12     	; 0x64e <vfprintf+0x11a>
 642:	83 37       	cpi	r24, 0x73	; 115
 644:	71 f0       	breq	.+28     	; 0x662 <vfprintf+0x12e>
 646:	83 35       	cpi	r24, 0x53	; 83
 648:	09 f0       	breq	.+2      	; 0x64c <vfprintf+0x118>
 64a:	59 c0       	rjmp	.+178    	; 0x6fe <vfprintf+0x1ca>
 64c:	21 c0       	rjmp	.+66     	; 0x690 <vfprintf+0x15c>
 64e:	f8 01       	movw	r30, r16
 650:	80 81       	ld	r24, Z
 652:	89 83       	std	Y+1, r24	; 0x01
 654:	0e 5f       	subi	r16, 0xFE	; 254
 656:	1f 4f       	sbci	r17, 0xFF	; 255
 658:	88 24       	eor	r8, r8
 65a:	83 94       	inc	r8
 65c:	91 2c       	mov	r9, r1
 65e:	53 01       	movw	r10, r6
 660:	13 c0       	rjmp	.+38     	; 0x688 <vfprintf+0x154>
 662:	28 01       	movw	r4, r16
 664:	f2 e0       	ldi	r31, 0x02	; 2
 666:	4f 0e       	add	r4, r31
 668:	51 1c       	adc	r5, r1
 66a:	f8 01       	movw	r30, r16
 66c:	a0 80       	ld	r10, Z
 66e:	b1 80       	ldd	r11, Z+1	; 0x01
 670:	36 fe       	sbrs	r3, 6
 672:	03 c0       	rjmp	.+6      	; 0x67a <vfprintf+0x146>
 674:	69 2d       	mov	r22, r9
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <vfprintf+0x14a>
 67a:	6f ef       	ldi	r22, 0xFF	; 255
 67c:	7f ef       	ldi	r23, 0xFF	; 255
 67e:	c5 01       	movw	r24, r10
 680:	0e 94 86 04 	call	0x90c	; 0x90c <strnlen>
 684:	4c 01       	movw	r8, r24
 686:	82 01       	movw	r16, r4
 688:	f3 2d       	mov	r31, r3
 68a:	ff 77       	andi	r31, 0x7F	; 127
 68c:	3f 2e       	mov	r3, r31
 68e:	16 c0       	rjmp	.+44     	; 0x6bc <vfprintf+0x188>
 690:	28 01       	movw	r4, r16
 692:	22 e0       	ldi	r18, 0x02	; 2
 694:	42 0e       	add	r4, r18
 696:	51 1c       	adc	r5, r1
 698:	f8 01       	movw	r30, r16
 69a:	a0 80       	ld	r10, Z
 69c:	b1 80       	ldd	r11, Z+1	; 0x01
 69e:	36 fe       	sbrs	r3, 6
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <vfprintf+0x174>
 6a2:	69 2d       	mov	r22, r9
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <vfprintf+0x178>
 6a8:	6f ef       	ldi	r22, 0xFF	; 255
 6aa:	7f ef       	ldi	r23, 0xFF	; 255
 6ac:	c5 01       	movw	r24, r10
 6ae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <strnlen_P>
 6b2:	4c 01       	movw	r8, r24
 6b4:	f3 2d       	mov	r31, r3
 6b6:	f0 68       	ori	r31, 0x80	; 128
 6b8:	3f 2e       	mov	r3, r31
 6ba:	82 01       	movw	r16, r4
 6bc:	33 fc       	sbrc	r3, 3
 6be:	1b c0       	rjmp	.+54     	; 0x6f6 <vfprintf+0x1c2>
 6c0:	82 2d       	mov	r24, r2
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	88 16       	cp	r8, r24
 6c6:	99 06       	cpc	r9, r25
 6c8:	b0 f4       	brcc	.+44     	; 0x6f6 <vfprintf+0x1c2>
 6ca:	b6 01       	movw	r22, r12
 6cc:	80 e2       	ldi	r24, 0x20	; 32
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 6d4:	2a 94       	dec	r2
 6d6:	f4 cf       	rjmp	.-24     	; 0x6c0 <vfprintf+0x18c>
 6d8:	f5 01       	movw	r30, r10
 6da:	37 fc       	sbrc	r3, 7
 6dc:	85 91       	lpm	r24, Z+
 6de:	37 fe       	sbrs	r3, 7
 6e0:	81 91       	ld	r24, Z+
 6e2:	5f 01       	movw	r10, r30
 6e4:	b6 01       	movw	r22, r12
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 6ec:	21 10       	cpse	r2, r1
 6ee:	2a 94       	dec	r2
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	82 1a       	sub	r8, r18
 6f4:	91 08       	sbc	r9, r1
 6f6:	81 14       	cp	r8, r1
 6f8:	91 04       	cpc	r9, r1
 6fa:	71 f7       	brne	.-36     	; 0x6d8 <vfprintf+0x1a4>
 6fc:	e8 c0       	rjmp	.+464    	; 0x8ce <vfprintf+0x39a>
 6fe:	84 36       	cpi	r24, 0x64	; 100
 700:	11 f0       	breq	.+4      	; 0x706 <vfprintf+0x1d2>
 702:	89 36       	cpi	r24, 0x69	; 105
 704:	41 f5       	brne	.+80     	; 0x756 <vfprintf+0x222>
 706:	f8 01       	movw	r30, r16
 708:	37 fe       	sbrs	r3, 7
 70a:	07 c0       	rjmp	.+14     	; 0x71a <vfprintf+0x1e6>
 70c:	60 81       	ld	r22, Z
 70e:	71 81       	ldd	r23, Z+1	; 0x01
 710:	82 81       	ldd	r24, Z+2	; 0x02
 712:	93 81       	ldd	r25, Z+3	; 0x03
 714:	0c 5f       	subi	r16, 0xFC	; 252
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	08 c0       	rjmp	.+16     	; 0x72a <vfprintf+0x1f6>
 71a:	60 81       	ld	r22, Z
 71c:	71 81       	ldd	r23, Z+1	; 0x01
 71e:	07 2e       	mov	r0, r23
 720:	00 0c       	add	r0, r0
 722:	88 0b       	sbc	r24, r24
 724:	99 0b       	sbc	r25, r25
 726:	0e 5f       	subi	r16, 0xFE	; 254
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	f3 2d       	mov	r31, r3
 72c:	ff 76       	andi	r31, 0x6F	; 111
 72e:	3f 2e       	mov	r3, r31
 730:	97 ff       	sbrs	r25, 7
 732:	09 c0       	rjmp	.+18     	; 0x746 <vfprintf+0x212>
 734:	90 95       	com	r25
 736:	80 95       	com	r24
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	f0 68       	ori	r31, 0x80	; 128
 744:	3f 2e       	mov	r3, r31
 746:	2a e0       	ldi	r18, 0x0A	; 10
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	a3 01       	movw	r20, r6
 74c:	0e 94 cd 04 	call	0x99a	; 0x99a <__ultoa_invert>
 750:	88 2e       	mov	r8, r24
 752:	86 18       	sub	r8, r6
 754:	45 c0       	rjmp	.+138    	; 0x7e0 <vfprintf+0x2ac>
 756:	85 37       	cpi	r24, 0x75	; 117
 758:	31 f4       	brne	.+12     	; 0x766 <vfprintf+0x232>
 75a:	23 2d       	mov	r18, r3
 75c:	2f 7e       	andi	r18, 0xEF	; 239
 75e:	b2 2e       	mov	r11, r18
 760:	2a e0       	ldi	r18, 0x0A	; 10
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	25 c0       	rjmp	.+74     	; 0x7b0 <vfprintf+0x27c>
 766:	93 2d       	mov	r25, r3
 768:	99 7f       	andi	r25, 0xF9	; 249
 76a:	b9 2e       	mov	r11, r25
 76c:	8f 36       	cpi	r24, 0x6F	; 111
 76e:	c1 f0       	breq	.+48     	; 0x7a0 <vfprintf+0x26c>
 770:	18 f4       	brcc	.+6      	; 0x778 <vfprintf+0x244>
 772:	88 35       	cpi	r24, 0x58	; 88
 774:	79 f0       	breq	.+30     	; 0x794 <vfprintf+0x260>
 776:	b5 c0       	rjmp	.+362    	; 0x8e2 <vfprintf+0x3ae>
 778:	80 37       	cpi	r24, 0x70	; 112
 77a:	19 f0       	breq	.+6      	; 0x782 <vfprintf+0x24e>
 77c:	88 37       	cpi	r24, 0x78	; 120
 77e:	21 f0       	breq	.+8      	; 0x788 <vfprintf+0x254>
 780:	b0 c0       	rjmp	.+352    	; 0x8e2 <vfprintf+0x3ae>
 782:	e9 2f       	mov	r30, r25
 784:	e0 61       	ori	r30, 0x10	; 16
 786:	be 2e       	mov	r11, r30
 788:	b4 fe       	sbrs	r11, 4
 78a:	0d c0       	rjmp	.+26     	; 0x7a6 <vfprintf+0x272>
 78c:	fb 2d       	mov	r31, r11
 78e:	f4 60       	ori	r31, 0x04	; 4
 790:	bf 2e       	mov	r11, r31
 792:	09 c0       	rjmp	.+18     	; 0x7a6 <vfprintf+0x272>
 794:	34 fe       	sbrs	r3, 4
 796:	0a c0       	rjmp	.+20     	; 0x7ac <vfprintf+0x278>
 798:	29 2f       	mov	r18, r25
 79a:	26 60       	ori	r18, 0x06	; 6
 79c:	b2 2e       	mov	r11, r18
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <vfprintf+0x278>
 7a0:	28 e0       	ldi	r18, 0x08	; 8
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <vfprintf+0x27c>
 7a6:	20 e1       	ldi	r18, 0x10	; 16
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0x27c>
 7ac:	20 e1       	ldi	r18, 0x10	; 16
 7ae:	32 e0       	ldi	r19, 0x02	; 2
 7b0:	f8 01       	movw	r30, r16
 7b2:	b7 fe       	sbrs	r11, 7
 7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <vfprintf+0x290>
 7b6:	60 81       	ld	r22, Z
 7b8:	71 81       	ldd	r23, Z+1	; 0x01
 7ba:	82 81       	ldd	r24, Z+2	; 0x02
 7bc:	93 81       	ldd	r25, Z+3	; 0x03
 7be:	0c 5f       	subi	r16, 0xFC	; 252
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <vfprintf+0x29c>
 7c4:	60 81       	ld	r22, Z
 7c6:	71 81       	ldd	r23, Z+1	; 0x01
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 5f       	subi	r16, 0xFE	; 254
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	a3 01       	movw	r20, r6
 7d2:	0e 94 cd 04 	call	0x99a	; 0x99a <__ultoa_invert>
 7d6:	88 2e       	mov	r8, r24
 7d8:	86 18       	sub	r8, r6
 7da:	fb 2d       	mov	r31, r11
 7dc:	ff 77       	andi	r31, 0x7F	; 127
 7de:	3f 2e       	mov	r3, r31
 7e0:	36 fe       	sbrs	r3, 6
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <vfprintf+0x2ca>
 7e4:	23 2d       	mov	r18, r3
 7e6:	2e 7f       	andi	r18, 0xFE	; 254
 7e8:	a2 2e       	mov	r10, r18
 7ea:	89 14       	cp	r8, r9
 7ec:	58 f4       	brcc	.+22     	; 0x804 <vfprintf+0x2d0>
 7ee:	34 fe       	sbrs	r3, 4
 7f0:	0b c0       	rjmp	.+22     	; 0x808 <vfprintf+0x2d4>
 7f2:	32 fc       	sbrc	r3, 2
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <vfprintf+0x2d4>
 7f6:	83 2d       	mov	r24, r3
 7f8:	8e 7e       	andi	r24, 0xEE	; 238
 7fa:	a8 2e       	mov	r10, r24
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <vfprintf+0x2d4>
 7fe:	b8 2c       	mov	r11, r8
 800:	a3 2c       	mov	r10, r3
 802:	03 c0       	rjmp	.+6      	; 0x80a <vfprintf+0x2d6>
 804:	b8 2c       	mov	r11, r8
 806:	01 c0       	rjmp	.+2      	; 0x80a <vfprintf+0x2d6>
 808:	b9 2c       	mov	r11, r9
 80a:	a4 fe       	sbrs	r10, 4
 80c:	0f c0       	rjmp	.+30     	; 0x82c <vfprintf+0x2f8>
 80e:	fe 01       	movw	r30, r28
 810:	e8 0d       	add	r30, r8
 812:	f1 1d       	adc	r31, r1
 814:	80 81       	ld	r24, Z
 816:	80 33       	cpi	r24, 0x30	; 48
 818:	21 f4       	brne	.+8      	; 0x822 <vfprintf+0x2ee>
 81a:	9a 2d       	mov	r25, r10
 81c:	99 7e       	andi	r25, 0xE9	; 233
 81e:	a9 2e       	mov	r10, r25
 820:	09 c0       	rjmp	.+18     	; 0x834 <vfprintf+0x300>
 822:	a2 fe       	sbrs	r10, 2
 824:	06 c0       	rjmp	.+12     	; 0x832 <vfprintf+0x2fe>
 826:	b3 94       	inc	r11
 828:	b3 94       	inc	r11
 82a:	04 c0       	rjmp	.+8      	; 0x834 <vfprintf+0x300>
 82c:	8a 2d       	mov	r24, r10
 82e:	86 78       	andi	r24, 0x86	; 134
 830:	09 f0       	breq	.+2      	; 0x834 <vfprintf+0x300>
 832:	b3 94       	inc	r11
 834:	a3 fc       	sbrc	r10, 3
 836:	11 c0       	rjmp	.+34     	; 0x85a <vfprintf+0x326>
 838:	a0 fe       	sbrs	r10, 0
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0x314>
 83c:	b2 14       	cp	r11, r2
 83e:	88 f4       	brcc	.+34     	; 0x862 <vfprintf+0x32e>
 840:	28 0c       	add	r2, r8
 842:	92 2c       	mov	r9, r2
 844:	9b 18       	sub	r9, r11
 846:	0e c0       	rjmp	.+28     	; 0x864 <vfprintf+0x330>
 848:	b2 14       	cp	r11, r2
 84a:	60 f4       	brcc	.+24     	; 0x864 <vfprintf+0x330>
 84c:	b6 01       	movw	r22, r12
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 856:	b3 94       	inc	r11
 858:	f7 cf       	rjmp	.-18     	; 0x848 <vfprintf+0x314>
 85a:	b2 14       	cp	r11, r2
 85c:	18 f4       	brcc	.+6      	; 0x864 <vfprintf+0x330>
 85e:	2b 18       	sub	r2, r11
 860:	02 c0       	rjmp	.+4      	; 0x866 <vfprintf+0x332>
 862:	98 2c       	mov	r9, r8
 864:	21 2c       	mov	r2, r1
 866:	a4 fe       	sbrs	r10, 4
 868:	10 c0       	rjmp	.+32     	; 0x88a <vfprintf+0x356>
 86a:	b6 01       	movw	r22, r12
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 874:	a2 fe       	sbrs	r10, 2
 876:	17 c0       	rjmp	.+46     	; 0x8a6 <vfprintf+0x372>
 878:	a1 fc       	sbrc	r10, 1
 87a:	03 c0       	rjmp	.+6      	; 0x882 <vfprintf+0x34e>
 87c:	88 e7       	ldi	r24, 0x78	; 120
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0x352>
 882:	88 e5       	ldi	r24, 0x58	; 88
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	b6 01       	movw	r22, r12
 888:	0c c0       	rjmp	.+24     	; 0x8a2 <vfprintf+0x36e>
 88a:	8a 2d       	mov	r24, r10
 88c:	86 78       	andi	r24, 0x86	; 134
 88e:	59 f0       	breq	.+22     	; 0x8a6 <vfprintf+0x372>
 890:	a1 fe       	sbrs	r10, 1
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x364>
 894:	8b e2       	ldi	r24, 0x2B	; 43
 896:	01 c0       	rjmp	.+2      	; 0x89a <vfprintf+0x366>
 898:	80 e2       	ldi	r24, 0x20	; 32
 89a:	a7 fc       	sbrc	r10, 7
 89c:	8d e2       	ldi	r24, 0x2D	; 45
 89e:	b6 01       	movw	r22, r12
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 8a6:	89 14       	cp	r8, r9
 8a8:	38 f4       	brcc	.+14     	; 0x8b8 <vfprintf+0x384>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e3       	ldi	r24, 0x30	; 48
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 8b4:	9a 94       	dec	r9
 8b6:	f7 cf       	rjmp	.-18     	; 0x8a6 <vfprintf+0x372>
 8b8:	8a 94       	dec	r8
 8ba:	f3 01       	movw	r30, r6
 8bc:	e8 0d       	add	r30, r8
 8be:	f1 1d       	adc	r31, r1
 8c0:	80 81       	ld	r24, Z
 8c2:	b6 01       	movw	r22, r12
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 8ca:	81 10       	cpse	r8, r1
 8cc:	f5 cf       	rjmp	.-22     	; 0x8b8 <vfprintf+0x384>
 8ce:	22 20       	and	r2, r2
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <vfprintf+0x3a0>
 8d2:	42 ce       	rjmp	.-892    	; 0x558 <vfprintf+0x24>
 8d4:	b6 01       	movw	r22, r12
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 91 04 	call	0x922	; 0x922 <fputc>
 8de:	2a 94       	dec	r2
 8e0:	f6 cf       	rjmp	.-20     	; 0x8ce <vfprintf+0x39a>
 8e2:	f6 01       	movw	r30, r12
 8e4:	86 81       	ldd	r24, Z+6	; 0x06
 8e6:	97 81       	ldd	r25, Z+7	; 0x07
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x3ba>
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	9f ef       	ldi	r25, 0xFF	; 255
 8ee:	2b 96       	adiw	r28, 0x0b	; 11
 8f0:	e2 e1       	ldi	r30, 0x12	; 18
 8f2:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__epilogue_restores__>

000008f6 <strnlen_P>:
 8f6:	fc 01       	movw	r30, r24
 8f8:	05 90       	lpm	r0, Z+
 8fa:	61 50       	subi	r22, 0x01	; 1
 8fc:	70 40       	sbci	r23, 0x00	; 0
 8fe:	01 10       	cpse	r0, r1
 900:	d8 f7       	brcc	.-10     	; 0x8f8 <strnlen_P+0x2>
 902:	80 95       	com	r24
 904:	90 95       	com	r25
 906:	8e 0f       	add	r24, r30
 908:	9f 1f       	adc	r25, r31
 90a:	08 95       	ret

0000090c <strnlen>:
 90c:	fc 01       	movw	r30, r24
 90e:	61 50       	subi	r22, 0x01	; 1
 910:	70 40       	sbci	r23, 0x00	; 0
 912:	01 90       	ld	r0, Z+
 914:	01 10       	cpse	r0, r1
 916:	d8 f7       	brcc	.-10     	; 0x90e <strnlen+0x2>
 918:	80 95       	com	r24
 91a:	90 95       	com	r25
 91c:	8e 0f       	add	r24, r30
 91e:	9f 1f       	adc	r25, r31
 920:	08 95       	ret

00000922 <fputc>:
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	fb 01       	movw	r30, r22
 92c:	23 81       	ldd	r18, Z+3	; 0x03
 92e:	21 fd       	sbrc	r18, 1
 930:	03 c0       	rjmp	.+6      	; 0x938 <fputc+0x16>
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	9f ef       	ldi	r25, 0xFF	; 255
 936:	2c c0       	rjmp	.+88     	; 0x990 <fputc+0x6e>
 938:	22 ff       	sbrs	r18, 2
 93a:	16 c0       	rjmp	.+44     	; 0x968 <fputc+0x46>
 93c:	46 81       	ldd	r20, Z+6	; 0x06
 93e:	57 81       	ldd	r21, Z+7	; 0x07
 940:	24 81       	ldd	r18, Z+4	; 0x04
 942:	35 81       	ldd	r19, Z+5	; 0x05
 944:	42 17       	cp	r20, r18
 946:	53 07       	cpc	r21, r19
 948:	44 f4       	brge	.+16     	; 0x95a <fputc+0x38>
 94a:	a0 81       	ld	r26, Z
 94c:	b1 81       	ldd	r27, Z+1	; 0x01
 94e:	9d 01       	movw	r18, r26
 950:	2f 5f       	subi	r18, 0xFF	; 255
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	31 83       	std	Z+1, r19	; 0x01
 956:	20 83       	st	Z, r18
 958:	8c 93       	st	X, r24
 95a:	26 81       	ldd	r18, Z+6	; 0x06
 95c:	37 81       	ldd	r19, Z+7	; 0x07
 95e:	2f 5f       	subi	r18, 0xFF	; 255
 960:	3f 4f       	sbci	r19, 0xFF	; 255
 962:	37 83       	std	Z+7, r19	; 0x07
 964:	26 83       	std	Z+6, r18	; 0x06
 966:	14 c0       	rjmp	.+40     	; 0x990 <fputc+0x6e>
 968:	8b 01       	movw	r16, r22
 96a:	ec 01       	movw	r28, r24
 96c:	fb 01       	movw	r30, r22
 96e:	00 84       	ldd	r0, Z+8	; 0x08
 970:	f1 85       	ldd	r31, Z+9	; 0x09
 972:	e0 2d       	mov	r30, r0
 974:	09 95       	icall
 976:	89 2b       	or	r24, r25
 978:	e1 f6       	brne	.-72     	; 0x932 <fputc+0x10>
 97a:	d8 01       	movw	r26, r16
 97c:	16 96       	adiw	r26, 0x06	; 6
 97e:	8d 91       	ld	r24, X+
 980:	9c 91       	ld	r25, X
 982:	17 97       	sbiw	r26, 0x07	; 7
 984:	01 96       	adiw	r24, 0x01	; 1
 986:	17 96       	adiw	r26, 0x07	; 7
 988:	9c 93       	st	X, r25
 98a:	8e 93       	st	-X, r24
 98c:	16 97       	sbiw	r26, 0x06	; 6
 98e:	ce 01       	movw	r24, r28
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	1f 91       	pop	r17
 996:	0f 91       	pop	r16
 998:	08 95       	ret

0000099a <__ultoa_invert>:
 99a:	fa 01       	movw	r30, r20
 99c:	aa 27       	eor	r26, r26
 99e:	28 30       	cpi	r18, 0x08	; 8
 9a0:	51 f1       	breq	.+84     	; 0x9f6 <__ultoa_invert+0x5c>
 9a2:	20 31       	cpi	r18, 0x10	; 16
 9a4:	81 f1       	breq	.+96     	; 0xa06 <__ultoa_invert+0x6c>
 9a6:	e8 94       	clt
 9a8:	6f 93       	push	r22
 9aa:	6e 7f       	andi	r22, 0xFE	; 254
 9ac:	6e 5f       	subi	r22, 0xFE	; 254
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	af 4f       	sbci	r26, 0xFF	; 255
 9b6:	b1 e0       	ldi	r27, 0x01	; 1
 9b8:	3e d0       	rcall	.+124    	; 0xa36 <__ultoa_invert+0x9c>
 9ba:	b4 e0       	ldi	r27, 0x04	; 4
 9bc:	3c d0       	rcall	.+120    	; 0xa36 <__ultoa_invert+0x9c>
 9be:	67 0f       	add	r22, r23
 9c0:	78 1f       	adc	r23, r24
 9c2:	89 1f       	adc	r24, r25
 9c4:	9a 1f       	adc	r25, r26
 9c6:	a1 1d       	adc	r26, r1
 9c8:	68 0f       	add	r22, r24
 9ca:	79 1f       	adc	r23, r25
 9cc:	8a 1f       	adc	r24, r26
 9ce:	91 1d       	adc	r25, r1
 9d0:	a1 1d       	adc	r26, r1
 9d2:	6a 0f       	add	r22, r26
 9d4:	71 1d       	adc	r23, r1
 9d6:	81 1d       	adc	r24, r1
 9d8:	91 1d       	adc	r25, r1
 9da:	a1 1d       	adc	r26, r1
 9dc:	20 d0       	rcall	.+64     	; 0xa1e <__ultoa_invert+0x84>
 9de:	09 f4       	brne	.+2      	; 0x9e2 <__ultoa_invert+0x48>
 9e0:	68 94       	set
 9e2:	3f 91       	pop	r19
 9e4:	2a e0       	ldi	r18, 0x0A	; 10
 9e6:	26 9f       	mul	r18, r22
 9e8:	11 24       	eor	r1, r1
 9ea:	30 19       	sub	r19, r0
 9ec:	30 5d       	subi	r19, 0xD0	; 208
 9ee:	31 93       	st	Z+, r19
 9f0:	de f6       	brtc	.-74     	; 0x9a8 <__ultoa_invert+0xe>
 9f2:	cf 01       	movw	r24, r30
 9f4:	08 95       	ret
 9f6:	46 2f       	mov	r20, r22
 9f8:	47 70       	andi	r20, 0x07	; 7
 9fa:	40 5d       	subi	r20, 0xD0	; 208
 9fc:	41 93       	st	Z+, r20
 9fe:	b3 e0       	ldi	r27, 0x03	; 3
 a00:	0f d0       	rcall	.+30     	; 0xa20 <__ultoa_invert+0x86>
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__ultoa_invert+0x5c>
 a04:	f6 cf       	rjmp	.-20     	; 0x9f2 <__ultoa_invert+0x58>
 a06:	46 2f       	mov	r20, r22
 a08:	4f 70       	andi	r20, 0x0F	; 15
 a0a:	40 5d       	subi	r20, 0xD0	; 208
 a0c:	4a 33       	cpi	r20, 0x3A	; 58
 a0e:	18 f0       	brcs	.+6      	; 0xa16 <__ultoa_invert+0x7c>
 a10:	49 5d       	subi	r20, 0xD9	; 217
 a12:	31 fd       	sbrc	r19, 1
 a14:	40 52       	subi	r20, 0x20	; 32
 a16:	41 93       	st	Z+, r20
 a18:	02 d0       	rcall	.+4      	; 0xa1e <__ultoa_invert+0x84>
 a1a:	a9 f7       	brne	.-22     	; 0xa06 <__ultoa_invert+0x6c>
 a1c:	ea cf       	rjmp	.-44     	; 0x9f2 <__ultoa_invert+0x58>
 a1e:	b4 e0       	ldi	r27, 0x04	; 4
 a20:	a6 95       	lsr	r26
 a22:	97 95       	ror	r25
 a24:	87 95       	ror	r24
 a26:	77 95       	ror	r23
 a28:	67 95       	ror	r22
 a2a:	ba 95       	dec	r27
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__ultoa_invert+0x86>
 a2e:	00 97       	sbiw	r24, 0x00	; 0
 a30:	61 05       	cpc	r22, r1
 a32:	71 05       	cpc	r23, r1
 a34:	08 95       	ret
 a36:	9b 01       	movw	r18, r22
 a38:	ac 01       	movw	r20, r24
 a3a:	0a 2e       	mov	r0, r26
 a3c:	06 94       	lsr	r0
 a3e:	57 95       	ror	r21
 a40:	47 95       	ror	r20
 a42:	37 95       	ror	r19
 a44:	27 95       	ror	r18
 a46:	ba 95       	dec	r27
 a48:	c9 f7       	brne	.-14     	; 0xa3c <__ultoa_invert+0xa2>
 a4a:	62 0f       	add	r22, r18
 a4c:	73 1f       	adc	r23, r19
 a4e:	84 1f       	adc	r24, r20
 a50:	95 1f       	adc	r25, r21
 a52:	a0 1d       	adc	r26, r0
 a54:	08 95       	ret

00000a56 <__prologue_saves__>:
 a56:	2f 92       	push	r2
 a58:	3f 92       	push	r3
 a5a:	4f 92       	push	r4
 a5c:	5f 92       	push	r5
 a5e:	6f 92       	push	r6
 a60:	7f 92       	push	r7
 a62:	8f 92       	push	r8
 a64:	9f 92       	push	r9
 a66:	af 92       	push	r10
 a68:	bf 92       	push	r11
 a6a:	cf 92       	push	r12
 a6c:	df 92       	push	r13
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	ca 1b       	sub	r28, r26
 a80:	db 0b       	sbc	r29, r27
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	f8 94       	cli
 a86:	de bf       	out	0x3e, r29	; 62
 a88:	0f be       	out	0x3f, r0	; 63
 a8a:	cd bf       	out	0x3d, r28	; 61
 a8c:	09 94       	ijmp

00000a8e <__epilogue_restores__>:
 a8e:	2a 88       	ldd	r2, Y+18	; 0x12
 a90:	39 88       	ldd	r3, Y+17	; 0x11
 a92:	48 88       	ldd	r4, Y+16	; 0x10
 a94:	5f 84       	ldd	r5, Y+15	; 0x0f
 a96:	6e 84       	ldd	r6, Y+14	; 0x0e
 a98:	7d 84       	ldd	r7, Y+13	; 0x0d
 a9a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a9c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a9e:	aa 84       	ldd	r10, Y+10	; 0x0a
 aa0:	b9 84       	ldd	r11, Y+9	; 0x09
 aa2:	c8 84       	ldd	r12, Y+8	; 0x08
 aa4:	df 80       	ldd	r13, Y+7	; 0x07
 aa6:	ee 80       	ldd	r14, Y+6	; 0x06
 aa8:	fd 80       	ldd	r15, Y+5	; 0x05
 aaa:	0c 81       	ldd	r16, Y+4	; 0x04
 aac:	1b 81       	ldd	r17, Y+3	; 0x03
 aae:	aa 81       	ldd	r26, Y+2	; 0x02
 ab0:	b9 81       	ldd	r27, Y+1	; 0x01
 ab2:	ce 0f       	add	r28, r30
 ab4:	d1 1d       	adc	r29, r1
 ab6:	0f b6       	in	r0, 0x3f	; 63
 ab8:	f8 94       	cli
 aba:	de bf       	out	0x3e, r29	; 62
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	cd bf       	out	0x3d, r28	; 61
 ac0:	ed 01       	movw	r28, r26
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
